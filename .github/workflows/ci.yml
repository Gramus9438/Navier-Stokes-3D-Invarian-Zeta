name: CI

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (CI minimal)
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements-ci.txt

      - name: Sanity check (import + tiny run)
        env:
          MPLBACKEND: Agg
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import sys, platform
          print("Python:", sys.version.split()[0])
          print("Platform:", platform.platform())
          import numpy as np, pandas as pd, matplotlib
          print("numpy:", np.__version__, "| pandas:", pd.__version__, "| matplotlib:", matplotlib.__version__)
          from src import NSConfig, run_simulation
          cfg = NSConfig(N=16, steps=2, dt=0.01, nu=0.01, save_every=1)
          out = run_simulation("taylor_green", ns_cfg=cfg)
          print("Tiny run OK. Keys:", sorted(out.keys()))
          PY

      - name: Run tests (pytest, verbose, capture to file)
        env:
          MPLBACKEND: Agg
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          pytest -vv | tee pytest-report.txt

      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-${{ matrix.python-version }}
          path: pytest-report.txt
